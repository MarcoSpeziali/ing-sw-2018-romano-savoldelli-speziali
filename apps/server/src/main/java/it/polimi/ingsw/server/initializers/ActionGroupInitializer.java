package it.polimi.ingsw.server.initializers;

import it.polimi.ingsw.core.Context;
import it.polimi.ingsw.core.UserInteractionProvider;
import it.polimi.ingsw.core.actions.ActionGroup;
import it.polimi.ingsw.core.actions.ActionGroupCallbacks;
import it.polimi.ingsw.core.actions.ExecutableAction;
import it.polimi.ingsw.server.compilers.actions.CompiledAction;
import it.polimi.ingsw.server.compilers.actions.CompiledActionGroup;
import it.polimi.ingsw.server.compilers.actions.CompiledExecutableAction;
import it.polimi.ingsw.utils.streams.StreamExceptionWrapper;

import java.lang.reflect.InvocationTargetException;
import java.util.List;
import java.util.stream.Collectors;

public class ActionGroupInitializer {
    private ActionGroupInitializer() {}

    /**
     * Instantiate an {@link ActionGroup} from a {@link CompiledActionGroup}.
     * @param compiledActionGroup the compiled action group
     * @param userInteractionProvider the user interaction provider
     * @param context the context
     * @param callbacks the action group callbacks
     * @return an instance of {@link ActionGroup}  created from a {@link CompiledActionGroup}
     * @throws NoSuchMethodException if the constructor could not be found
     * @throws IllegalAccessException if this {@code Constructor} object
     *         is enforcing Java language access control and the underlying
     *         constructor is inaccessible
     * @throws InstantiationException if the class that declares the
     *         underlying constructor represents an abstract class
     * @throws InvocationTargetException if the underlying constructor
     *         throws an exception
     */
    public static ActionGroup instantiate(CompiledActionGroup compiledActionGroup, UserInteractionProvider userInteractionProvider, Context context, ActionGroupCallbacks callbacks) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
        return new ActionGroup(
                compiledActionGroup.getActionData(),
                compiledActionGroup.getRepetitions(),
                compiledActionGroup.getChooseBetween(),
                instantiateSubActions(compiledActionGroup.getActions(), userInteractionProvider, context, callbacks),
                callbacks
        );
    }

    /**
     * @param compiledExecutableActions the list of sub-actions of a {@link CompiledActionGroup} to instantiate
     * @param userInteractionProvider the user interaction provider
     * @param context the context
     * @param callbacks the action group callbacks
     * @return a {@link List} of {@link ExecutableAction} created with the sub-actions of a {@link CompiledActionGroup}
     * @throws NoSuchMethodException if the constructor could not be found
     * @throws IllegalAccessException if this {@code Constructor} object
     *         is enforcing Java language access control and the underlying
     *         constructor is inaccessible
     * @throws InstantiationException if the class that declares the
     *         underlying constructor represents an abstract class
     * @throws InvocationTargetException if the underlying constructor
     *         throws an exception
     */
    private static List<ExecutableAction> instantiateSubActions(List<CompiledExecutableAction> compiledExecutableActions, UserInteractionProvider userInteractionProvider, Context context, ActionGroupCallbacks callbacks) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException {
        try {
            return compiledExecutableActions.stream()
                    .map(compiledExecutableAction -> {
                        // due to the strict (and terrible, imo) exception handling of java
                        // the possible exceptions generated by ActionGroupInitializer::instantiate
                        // and ActionInitializer::instantiate cannot be easily propagated
                        try {
                            if (compiledExecutableAction.getClassToInstantiate().equals(ActionGroup.class)) {
                                return ActionGroupInitializer.instantiate(
                                        (CompiledActionGroup) compiledExecutableAction,
                                        userInteractionProvider,
                                        context,
                                        callbacks
                                );
                            }
                            else {
                                return ActionInitializer.instantiate(
                                        (CompiledAction) compiledExecutableAction,
                                        userInteractionProvider,
                                        context
                                );
                            }
                        }
                        catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException | InstantiationException e) {
                            return StreamExceptionWrapper.wrap(e);
                        }
                    }).collect(Collectors.toList());
        }
        catch (StreamExceptionWrapper e) {
            return e.tryUnwrap(NoSuchMethodException.class)
                    .tryUnwrap(InvocationTargetException.class)
                    .tryUnwrap(IllegalAccessException.class)
                    .tryFinalUnwrap(InstantiationException.class);
        }
    }
}
